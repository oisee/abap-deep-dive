#!/usr/bin/env python3
"""
Simplified ABAP Deep Dive Book Builder
Builds PDF with pre-rendered diagrams
"""

import os
import sys
import json
import subprocess
import shutil
from datetime import datetime
from pathlib import Path

# Configuration
BOOK_TITLE = "ABAP Deep Dive: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —è–¥—Ä–æ –∏ —ç–≤–æ–ª—é—Ü–∏—è SAP"
AUTHOR = "ABAP Deep Dive Project"
VERSION_FILE = "version.json"
OUTPUT_DIR = "build"

# Chapter order
CHAPTERS = [
    "ADD - ABAP Deep Dive.md",
    "ADD - –ì–ª–∞–≤–∞ 1  –ê–Ω–∞—Ç–æ–º–∏—è SAP —Å–∏—Å—Ç–µ–º—ã.md",
    "ADD - –ì–ª–∞–≤–∞ 2 –Ø–¥—Ä–æ SAP - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.md",
    "ADD - –ì–ª–∞–≤–∞ 3 Work Process - –º–∏–∫—Ä–æ–∫–æ—Å–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.md",
    "ADD - –ì–ª–∞–≤–∞ 4 –ò–µ—Ä–∞—Ä—Ö–∏—è –ø–∞–º—è—Ç–∏ - –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–µ–∂–¥—É –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å—é –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ–º.md",
    "ADD - –ì–ª–∞–≤–∞ 5 ABAP Virtual Machine - –æ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é.md",
    "ADD - –ì–ª–∞–≤–∞ 6 Database Interface - –º–æ—Å—Ç –º–µ–∂–¥—É ABAP –∏ –°–£–ë–î.md",
    "ADD - –ì–ª–∞–≤–∞ 7 –û—Ç R2 –¥–æ S4HANA - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–≤–æ–ª—é—Ü–∏–∏.md",
    "ADD - –ì–ª–∞–≤–∞ 7 –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ü—Ä–æ—Ç–æ–∫–æ–ª—ã SAP - –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.md",
    "ADD - –ì–ª–∞–≤–∞ 8 SAP HANA - –±–æ–ª—å—à–µ —á–µ–º –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.md",
    "ADD - –ì–ª–∞–≤–∞ 9 SADL –∏ Gateway - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è REST API.md",
    "ADD - –ì–ª–∞–≤–∞ 10 –û—Ç BOPF –∫ RAP - —ç–≤–æ–ª—é—Ü–∏—è –±–∏–∑–Ω–µ—Å-–æ–±—ä–µ–∫—Ç–æ–≤.md",
    "ADD - –ì–ª–∞–≤–∞ 11 BTP –∏ Steampunk - ABAP –≤ –æ–±–ª–∞–∫–µ.md",
    "ADD - –ì–ª–∞–≤–∞ 11 ABAP Daemons –∏ Channels - —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.md",
    "ADD - –ì–ª–∞–≤–∞ 12 –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä—å.md"
]

def load_version():
    """Load version info"""
    if os.path.exists(VERSION_FILE):
        with open(VERSION_FILE, 'r') as f:
            return json.load(f)
    return {'major': 1, 'minor': 0, 'build_number': 0}

def save_version(version_info):
    """Save version info"""
    with open(VERSION_FILE, 'w') as f:
        json.dump(version_info, f, indent=2)

def get_version_string(version_info):
    """Generate version string"""
    date_str = datetime.now().strftime("%Y%m%d")
    return f"{date_str}-v{version_info['major']}.{version_info['minor']}-b{version_info['build_number']}"

def process_content(content):
    """Process markdown content"""
    # Replace Unicode in headers
    unicode_replacements = {
        '‚úÖ': '[OK]',
        '‚ùå': '[X]',
        '‚ö†Ô∏è': '[!]',
        'üìö': '[BOOK]',
        'üîç': '[SEARCH]',
        'üí°': '[IDEA]',
        'üéØ': '[TARGET]',
        'üöÄ': '[ROCKET]',
        '‚ö°': '[LIGHTNING]',
        'üîß': '[WRENCH]',
        'üìä': '[CHART]',
        'üèóÔ∏è': '[BUILDING]',
        'üîÑ': '[CYCLE]',
        'üìù': '[MEMO]',
        'üé®': '[ART]',
        'üåü': '[STAR]',
        'üíæ': '[DISK]',
        'üîó': '[LINK]',
        'üî®': '[HAMMER]',
        'üìÑ': '[PAGE]',
        'üì±': '[PHONE]',
        'üßπ': '[BROOM]',
        'üì¶': '[PACKAGE]',
        '‚¨ÜÔ∏è': '[UP]',
        'üìã': '[CLIPBOARD]'
    }
    
    lines = content.split('\n')
    for i, line in enumerate(lines):
        if line.strip().startswith('#'):
            for emoji, replacement in unicode_replacements.items():
                line = line.replace(emoji, replacement)
            lines[i] = line
    
    return '\n'.join(lines)

def main():
    print("üìö Simplified ABAP Deep Dive Book Builder")
    
    # Load and update version
    version_info = load_version()
    version_info['build_number'] += 1
    version_info['last_build'] = datetime.now().isoformat()
    save_version(version_info)
    
    version_string = get_version_string(version_info)
    print(f"üìã Version: {version_string}")
    
    # Create output directory
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # Combine chapters
    combined_path = os.path.join(OUTPUT_DIR, f"combined_{version_string}.md")
    print("\nüìÑ Combining chapters...")
    
    with open(combined_path, 'w') as outfile:
        # Write header
        outfile.write(f"---\n")
        outfile.write(f"title: \"{BOOK_TITLE}\"\n")
        outfile.write(f"author: \"{AUTHOR}\"\n")
        outfile.write(f"date: \"{datetime.now().strftime('%B %Y')}\"\n")
        outfile.write(f"version: \"{version_string}\"\n")
        outfile.write(f"lang: ru-RU\n")
        outfile.write(f"toc: true\n")
        outfile.write(f"toc-depth: 3\n")
        outfile.write(f"---\n\n")
        
        # Add cover if exists
        if os.path.exists('add-cover.png'):
            print("  ‚Ä¢ Adding cover image")
            outfile.write("![](add-cover.png)\n\n\\newpage\n\n")
        
        # Process each chapter
        for chapter in CHAPTERS:
            if os.path.exists(chapter):
                print(f"  ‚Ä¢ Processing {chapter}")
                with open(chapter, 'r') as f:
                    content = f.read()
                    content = process_content(content)
                    outfile.write(content)
                    outfile.write("\n\n\\newpage\n\n")
    
    # Build PDF with simplified settings
    output_pdf = os.path.join(OUTPUT_DIR, f"ABAP_Deep_Dive_{version_string}.pdf")
    print("\nüìÑ Building PDF...")
    
    cmd = [
        'pandoc',
        combined_path,
        '--pdf-engine=pdflatex',  # Use simpler engine
        '--toc',
        '--resource-path=.:build:build/diagrams',
        '-o', output_pdf
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        if result.returncode == 0:
            size_mb = os.path.getsize(output_pdf) / (1024 * 1024)
            print(f"‚úÖ PDF created: {output_pdf} ({size_mb:.1f} MB)")
        else:
            print(f"‚ùå PDF build failed: {result.stderr}")
            # Try without TOC
            print("üîÑ Retrying without TOC...")
            cmd.remove('--toc')
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            if result.returncode == 0:
                size_mb = os.path.getsize(output_pdf) / (1024 * 1024)
                print(f"‚úÖ PDF created (no TOC): {output_pdf} ({size_mb:.1f} MB)")
            else:
                print(f"‚ùå PDF build still failed: {result.stderr[:500]}")
    except subprocess.TimeoutExpired:
        print("‚ùå PDF build timed out")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == '__main__':
    main()