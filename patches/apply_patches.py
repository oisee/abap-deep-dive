#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π –∫ –≥–ª–∞–≤–∞–º –∫–Ω–∏–≥–∏ ABAP Deep Dive

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python apply_patches.py [chapter_number] [--dry-run]
    
–ü—Ä–∏–º–µ—Ä—ã:
    python apply_patches.py          # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ç—á–∏
    python apply_patches.py 1        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤—ã 1
    python apply_patches.py --dry-run # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import os
import sys
import re
import shutil
from datetime import datetime
from pathlib import Path

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parent.parent
PATCHES_DIR = ROOT_DIR / "patches"
BACKUP_DIR = ROOT_DIR / "backup"

# –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –≥–ª–∞–≤ –Ω–∞ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
CHAPTER_FILES = {
    1: "ADD - –ì–ª–∞–≤–∞ 1  –ê–Ω–∞—Ç–æ–º–∏—è SAP —Å–∏—Å—Ç–µ–º—ã.md",
    2: "ADD - –ì–ª–∞–≤–∞ 2 –Ø–¥—Ä–æ SAP - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.md",
    3: "ADD - –ì–ª–∞–≤–∞ 3 Work Process - –º–∏–∫—Ä–æ–∫–æ—Å–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.md",
    4: "ADD - –ì–ª–∞–≤–∞ 4 –ò–µ—Ä–∞—Ä—Ö–∏—è –ø–∞–º—è—Ç–∏ - –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–µ–∂–¥—É –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å—é –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ–º.md",
    5: "ADD - –ì–ª–∞–≤–∞ 5 ABAP Virtual Machine - –æ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é.md",
    6: "ADD - –ì–ª–∞–≤–∞ 6 Database Interface - –º–æ—Å—Ç –º–µ–∂–¥—É ABAP –∏ –°–£–ë–î.md",
    7: "ADD - –ì–ª–∞–≤–∞ 7 –û—Ç R2 –¥–æ S4HANA - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–≤–æ–ª—é—Ü–∏–∏.md",
    8: "ADD - –ì–ª–∞–≤–∞ 8 SAP HANA - –±–æ–ª—å—à–µ —á–µ–º –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.md",
    9: "ADD - –ì–ª–∞–≤–∞ 9 SADL –∏ Gateway - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è REST API.md",
    10: "ADD - –ì–ª–∞–≤–∞ 10 –û—Ç BOPF –∫ RAP - —ç–≤–æ–ª—é—Ü–∏—è –±–∏–∑–Ω–µ—Å-–æ–±—ä–µ–∫—Ç–æ–≤.md",
    11: "ADD - –ì–ª–∞–≤–∞ 11 BTP –∏ Steampunk - ABAP –≤ –æ–±–ª–∞–∫–µ.md",
    12: "ADD - –ì–ª–∞–≤–∞ 12 –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä—å.md",
}


class PatchApplier:
    def __init__(self, dry_run=False):
        self.dry_run = dry_run
        self.applied_patches = []
        self.failed_patches = []
        
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        if self.dry_run:
            print(f"[DRY RUN] –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–ª—è {file_path}")
            return
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = BACKUP_DIR / f"{file_path.name}.{timestamp}.bak"
        backup_path.parent.mkdir(parents=True, exist_ok=True)
        
        shutil.copy2(file_path, backup_path)
        print(f"‚úì –°–æ–∑–¥–∞–Ω backup: {backup_path}")
        
    def parse_patch(self, patch_content):
        """–†–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ç—á-—Ñ–∞–π–ª–∞"""
        patches = []
        current_patch = None
        
        lines = patch_content.split('\n')
        i = 0
        
        while i < len(lines):
            line = lines[i]
            
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if line.startswith('### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') or line.startswith('### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ'):
                if current_patch:
                    patches.append(current_patch)
                    
                current_patch = {
                    'title': line,
                    'file': None,
                    'line': None,
                    'find': None,
                    'replace': None,
                    'add_after': None,
                    'reason': None
                }
                
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ç—á–∞
            elif current_patch:
                if line.startswith('- –§–∞–π–ª:'):
                    current_patch['file'] = line.split(':', 1)[1].strip()
                    
                elif line.startswith('- –°—Ç—Ä–æ–∫–∞:'):
                    line_info = line.split(':', 1)[1].strip()
                    # –ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    match = re.search(r'(\d+)', line_info)
                    if match:
                        current_patch['line'] = int(match.group(1))
                        
                elif line.startswith('- –ù–∞–π—Ç–∏:'):
                    # –°–æ–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ "- –ó–∞–º–µ–Ω–∏—Ç—å:" –∏–ª–∏ "- –î–æ–±–∞–≤–∏—Ç—å:"
                    i += 1
                    find_lines = []
                    while i < len(lines) and not lines[i].startswith('- –ó–∞–º–µ–Ω–∏—Ç—å:') and not lines[i].startswith('- –î–æ–±–∞–≤–∏—Ç—å:'):
                        find_lines.append(lines[i])
                        i += 1
                    current_patch['find'] = '\n'.join(find_lines).strip()
                    i -= 1  # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å "- –ó–∞–º–µ–Ω–∏—Ç—å:" –∏–ª–∏ "- –î–æ–±–∞–≤–∏—Ç—å:"
                    
                elif line.startswith('- –ó–∞–º–µ–Ω–∏—Ç—å:'):
                    # –°–æ–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ "- –ü—Ä–∏—á–∏–Ω–∞:"
                    i += 1
                    replace_lines = []
                    while i < len(lines) and not lines[i].startswith('- –ü—Ä–∏—á–∏–Ω–∞:'):
                        replace_lines.append(lines[i])
                        i += 1
                    current_patch['replace'] = '\n'.join(replace_lines).strip()
                    i -= 1  # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å "- –ü—Ä–∏—á–∏–Ω–∞:"
                    
                elif line.startswith('- –î–æ–±–∞–≤–∏—Ç—å:'):
                    # –°–æ–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ "- –ü—Ä–∏—á–∏–Ω–∞:"
                    i += 1
                    add_lines = []
                    while i < len(lines) and not lines[i].startswith('- –ü—Ä–∏—á–∏–Ω–∞:'):
                        add_lines.append(lines[i])
                        i += 1
                    current_patch['add_after'] = '\n'.join(add_lines).strip()
                    i -= 1  # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å "- –ü—Ä–∏—á–∏–Ω–∞:"
                    
                elif line.startswith('- –ü—Ä–∏—á–∏–Ω–∞:'):
                    current_patch['reason'] = line.split(':', 1)[1].strip()
                    
            i += 1
            
        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ç—á
        if current_patch:
            patches.append(current_patch)
            
        return patches
        
    def apply_patch_to_file(self, patch, file_content):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –ø–∞—Ç—á –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞"""
        # –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–º–ª—è—é—â–∏–µ ``` –µ—Å–ª–∏ –µ—Å—Ç—å
        if patch.get('find'):
            patch['find'] = patch['find'].strip('```').strip()
        if patch.get('replace'):
            patch['replace'] = patch['replace'].strip('```').strip()
        if patch.get('add_after'):
            patch['add_after'] = patch['add_after'].strip('```').strip()
            
        if patch.get('find') and patch.get('replace'):
            # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
            if patch['find'] in file_content:
                new_content = file_content.replace(patch['find'], patch['replace'], 1)
                return new_content, True
            else:
                print(f"  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã: {patch['find'][:50]}...")
                return file_content, False
                
        elif patch.get('add_after') and patch.get('line'):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏
            lines = file_content.split('\n')
            if 0 <= patch['line'] <= len(lines):
                lines.insert(patch['line'], patch['add_after'])
                return '\n'.join(lines), True
            else:
                print(f"  ‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {patch['line']}")
                return file_content, False
                
        else:
            print(f"  ‚ö†Ô∏è  –ù–µ–ø–æ–ª–Ω—ã–π –ø–∞—Ç—á: {patch['title']}")
            return file_content, False
            
    def apply_patches_to_chapter(self, chapter_num):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ç—á–∏ –∫ –≥–ª–∞–≤–µ"""
        chapter_dir = PATCHES_DIR / f"chapter_{chapter_num}"
        if not chapter_dir.exists():
            print(f"–ù–µ—Ç –ø–∞—Ç—á–µ–π –¥–ª—è –≥–ª–∞–≤—ã {chapter_num}")
            return
            
        chapter_file = ROOT_DIR / CHAPTER_FILES.get(chapter_num)
        if not chapter_file.exists():
            print(f"‚ùå –§–∞–π–ª –≥–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {chapter_file}")
            return
            
        print(f"\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤—ã {chapter_num}: {CHAPTER_FILES[chapter_num]}")
        
        # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã
        with open(chapter_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        original_content = content
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        patch_files = sorted(chapter_dir.glob("*.patch"))
        
        for patch_file in patch_files:
            print(f"\nüìÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞: {patch_file.name}")
            
            with open(patch_file, 'r', encoding='utf-8') as f:
                patch_content = f.read()
                
            patches = self.parse_patch(patch_content)
            
            for patch in patches:
                print(f"  ‚Ä¢ {patch['title']}")
                if self.dry_run:
                    print(f"    [DRY RUN] –ë—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {patch['file']}")
                else:
                    new_content, success = self.apply_patch_to_file(patch, content)
                    if success:
                        content = new_content
                        self.applied_patches.append(f"{chapter_num}: {patch['title']}")
                        print(f"    ‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω–æ")
                    else:
                        self.failed_patches.append(f"{chapter_num}: {patch['title']}")
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not self.dry_run and content != original_content:
            self.backup_file(chapter_file)
            with open(chapter_file, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"\n‚úì –ì–ª–∞–≤–∞ {chapter_num} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        elif self.dry_run:
            print(f"\n[DRY RUN] –ì–ª–∞–≤–∞ {chapter_num} –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"\n‚ÑπÔ∏è  –ì–ª–∞–≤–∞ {chapter_num} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")
            
    def run(self, chapter=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π"""
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∫ –∫–Ω–∏–≥–µ ABAP Deep Dive")
        print("=" * 50)
        
        if self.dry_run:
            print("‚ö†Ô∏è  –†–ï–ñ–ò–ú DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("=" * 50)
            
        if chapter:
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤–µ
            self.apply_patches_to_chapter(chapter)
        else:
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º –≥–ª–∞–≤–∞–º
            for chapter_num in sorted(CHAPTER_FILES.keys()):
                self.apply_patches_to_chapter(chapter_num)
                
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–ò:")
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(self.applied_patches)} –ø–∞—Ç—á–µ–π")
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(self.failed_patches)} –ø–∞—Ç—á–µ–π")
        
        if self.failed_patches:
            print("\n–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–∞—Ç—á–∏:")
            for failed in self.failed_patches:
                print(f"  ‚Ä¢ {failed}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dry_run = '--dry-run' in sys.argv
    chapter = None
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    for arg in sys.argv[1:]:
        if arg.isdigit():
            chapter = int(arg)
            if chapter not in CHAPTER_FILES:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã: {chapter}")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≤—ã: {', '.join(map(str, sorted(CHAPTER_FILES.keys())))}")
                sys.exit(1)
                
    # –ó–∞–ø—É—Å–∫
    applier = PatchApplier(dry_run=dry_run)
    applier.run(chapter)


if __name__ == "__main__":
    main()