# Патч для важных исправлений Главы 5
# Дата: 2025-07-21
# Применить с помощью скрипта apply_patches.py

## ВАЖНЫЕ ИСПРАВЛЕНИЯ

### Исправление 13: Добавить полную схему компиляции
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 53
- Добавить:
```
### Дополнительные таблицы репозитория

При компиляции также используются:
- **CROSS**: Таблица перекрестных ссылок (where-used list)
- **DYNPLOAD**: Скомпилированные экраны (dynpro)
- **TEXTPOOL**: Текстовые элементы программы
- **D010SINF**: Информация о экранах
- **TRDIR**: Каталог программ и их атрибуты
```
- Причина: Неполное описание процесса компиляции

### Исправление 14: Добавить размеры структур данных
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 308
- Добавить:
```
### Размеры структур данных по платформам

| Тип | 32-bit | 64-bit |
|-----|--------|--------|
| Pointer | 4 байта | 8 байт |
| Integer | 4 байта | 4 байта |
| Float | 8 байт | 8 байт |
| Character | 2 байта (UTF-16) | 2 байта (UTF-16) |
| Reference | 4 байта | 8 байт |
```
- Причина: Отсутствие конкретных размеров

### Исправление 15: Описать фреймы вызовов
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 352
- Добавить:
```
### Структура фрейма вызова (Call Frame)

Каждый вызов метода/функции создает фрейм:
1. **Return address** - адрес возврата в байт-коде
2. **Local variables** - локальные переменные
3. **Parameters** - входные параметры
4. **Temporary values** - промежуточные результаты
5. **Exception handler** - ссылка на обработчик исключений

Фреймы организованы в стек вызовов (call stack).
```
- Причина: Неполное описание стековой машины

### Исправление 16: Добавить информацию о PXA буфере
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 35
- Добавить:
```
### Program eXecution Area (PXA)

PXA - это shared memory область для кеширования скомпилированных программ:
- Размер: автоматически вычисляется на основе доступной памяти
- Параметр для мониторинга: abap/pxa_buffer_size (read-only)
- Алгоритм вытеснения: LRU (Least Recently Used)
- Статистика: транзакция ST02, раздел Program

При заполнении PXA старые неиспользуемые программы выгружаются.
```
- Причина: PXA упоминается без объяснения

### Исправление 17: Определить порог линейного поиска
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: 778-818
- Найти: "LINEAR_SEARCH_THRESHOLD"
- Заменить: "100 записей (типичное значение для переключения на бинарный поиск)"
- Причина: Неопределенная константа

### Исправление 18: Добавить версии для string оптимизаций
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: 821
- Найти: "String optimizations"
- Заменить: "String optimizations (доступны с разных версий)"
- После добавить:
```
- String sharing: NetWeaver 7.02
- String interning для литералов: NetWeaver 7.40
- Оптимизация конкатенации: NetWeaver 7.40 SP05
```
- Причина: Отсутствие версионной информации

### Исправление 19: Уточнить условия loop unrolling
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: 857-883
- Найти: описание loop unrolling
- Добавить:
```
**Условия применения**:
- Только для DO циклов с константным числом итераций
- Количество итераций < 10
- Тело цикла не содержит вызовов методов
- Нет выходов из цикла (EXIT, RETURN)
```
- Причина: Неполное описание оптимизации

### Исправление 20: Добавить раздел о динамической генерации
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 1012
- Добавить:
```
## Динамическая генерация кода

ABAP поддерживает генерацию кода во время выполнения:

### GENERATE SUBROUTINE POOL
```abap
DATA: source TYPE TABLE OF string,
      prog   TYPE string.

APPEND 'FORM dynamic.' TO source.
APPEND '  WRITE: / ''Dynamic code''.' TO source.
APPEND 'ENDFORM.' TO source.

GENERATE SUBROUTINE POOL source NAME prog.
PERFORM dynamic IN PROGRAM (prog).
```

### INSERT/GENERATE REPORT
Для генерации полноценных программ.
```
- Причина: Важный механизм не описан

### Исправление 21: Исправить описание выполнения
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: 5
- Найти: "интерпретируется виртуальной машиной"
- Заменить: "компилируется в байт-код и выполняется виртуальной машиной"
- Причина: Неточное описание

### Исправление 22: Добавить информацию об отладчике
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 180
- Добавить:
```
### Поддержка отладки

Line table используется для:
- Установки breakpoints по номерам строк
- Пошагового выполнения (F5/F6/F7/F8)
- Отображения текущей позиции в исходном коде
- Watchpoints на изменение переменных

Отладочная информация всегда включена в ABAP Load.
```
- Причина: Механизм отладки не описан

### Исправление 23: Описать Garbage Collection
- Файл: ADD - Глава 5 ABAP Virtual Machine - от исходника к исполнению.md
- Строка: после 273
- Добавить:
```
### Управление памятью и Garbage Collection

ABAP использует reference counting для автоматического управления памятью:
- Каждый объект имеет счетчик ссылок
- При создании ссылки счетчик увеличивается
- При удалении ссылки счетчик уменьшается
- При достижении 0 объект удаляется

Это отличается от mark-and-sweep GC в Java/.NET.
Преимущество: предсказуемое время освобождения памяти.
```
- Причина: GC механизм не описан